/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.TollAdvertisementMessage;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;
import lombok.Getter;
import lombok.Setter;
import us.dot.its.jpo.asn.j2735.r2024.Common.LaneWidth;
import us.dot.its.jpo.asn.j2735.r2024.Common.Position3D;
import us.dot.its.jpo.asn.j2735.r2024.Common.RegulatorySpeedLimit;
import us.dot.its.jpo.asn.j2735.r2024.MapData.GenericLane;
import us.dot.its.jpo.asn.runtime.annotations.Asn1Property;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;
import us.dot.its.jpo.asn.runtime.types.Asn1Sequence;
import us.dot.its.jpo.asn.runtime.types.Asn1SequenceOf;

@JsonInclude(Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
@Getter
@Setter
public class TollPointMap extends Asn1Sequence {

	@Asn1Property(tag = 0, name = "revisionNum")
	@JsonProperty("revisionNum")
	private RevisionNumInteger revisionNum;
	@Asn1Property(tag = 1, name = "referencePoint")
	@JsonProperty("referencePoint")
	private Position3D referencePoint;
	@Asn1Property(tag = 2, name = "speedLimit")
	@JsonProperty("speedLimit")
	private RegulatorySpeedLimit speedLimit;
	@Asn1Property(tag = 3, name = "laneWidth")
	@JsonProperty("laneWidth")
	private LaneWidth laneWidth;
	@Asn1Property(tag = 4, name = "approachLanesMap")
	@JsonProperty("approachLanesMap")
	@JacksonXmlElementWrapper(localName = "approachLanesMap")
	@JacksonXmlProperty(localName = "GenericLane")
	private SequenceOfApproachLanesMap approachLanesMap;
	@Asn1Property(tag = 5, name = "tollZoneLanesMap")
	@JsonProperty("tollZoneLanesMap")
	@JacksonXmlElementWrapper(localName = "tollZoneLanesMap")
	@JacksonXmlProperty(localName = "GenericLane")
	private SequenceOfTollZoneLanesMap tollZoneLanesMap;

	public static class RevisionNumInteger extends Asn1Integer {
		public RevisionNumInteger() {
			super(1L, 10L);
		}

		@JsonCreator
		public RevisionNumInteger(long value) {
			this();
			this.value = value;
		}
	}

	@JsonInclude(Include.NON_NULL)
	public static class SequenceOfApproachLanesMap extends Asn1SequenceOf<GenericLane> {
		public SequenceOfApproachLanesMap() {
			super(GenericLane.class, 1L, 64L);
		}
	}

	@JsonInclude(Include.NON_NULL)
	public static class SequenceOfTollZoneLanesMap extends Asn1SequenceOf<GenericLane> {
		public SequenceOfTollZoneLanesMap() {
			super(GenericLane.class, 1L, 64L);
		}
	}

	public TollPointMap() {
		super(true);
	}
}