/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package j2735.RoadUserChargingConfigMessage;

import asn2pojo.runtime.types.Asn1Sequence;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import asn2pojo.runtime.types.Asn1Integer;
import com.fasterxml.jackson.annotation.JsonCreator;
import lombok.Getter;
import lombok.Setter;
import asn2pojo.runtime.annotations.Asn1Property;
import com.fasterxml.jackson.annotation.JsonProperty;
import j2735.Common.DDateTime;
import asn2pojo.runtime.types.Asn1Enumerated;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import asn2pojo.runtime.serialization.EnumeratedSerializer;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import asn2pojo.runtime.serialization.EnumeratedDeserializer;

@JsonInclude(Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
@Getter
@Setter
public class ConfigInfo extends Asn1Sequence {

	@Asn1Property(tag = 0, name = "configID")
	@JsonProperty("configID")
	private ConfigIDInteger configID;
	@Asn1Property(tag = 1, name = "configVersion")
	@JsonProperty("configVersion")
	private ConfigVersionInteger configVersion;
	@Asn1Property(tag = 2, name = "startDate")
	@JsonProperty("startDate")
	private DDateTime startDate;
	@Asn1Property(tag = 3, name = "expirationDate")
	@JsonProperty("expirationDate")
	private DDateTime expirationDate;
	@Asn1Property(tag = 4, name = "configurationFeeType")
	@JsonProperty("configurationFeeType")
	private EnumeratedConfigurationFeeType configurationFeeType;

	public static class ConfigIDInteger extends Asn1Integer {
		public ConfigIDInteger() {
			super(0L, 64L);
		}

		@JsonCreator
		public ConfigIDInteger(long value) {
			this();
			this.value = value;
		}
	}

	public static class ConfigVersionInteger extends Asn1Integer {
		public ConfigVersionInteger() {
			super(0L, 64L);
		}

		@JsonCreator
		public ConfigVersionInteger(long value) {
			this();
			this.value = value;
		}
	}

	@Getter
	@JsonSerialize(using = EnumeratedConfigurationFeeTypeSerializer.class)
	@JsonDeserialize(using = EnumeratedConfigurationFeeTypeDeserializer.class)
	public static enum EnumeratedConfigurationFeeType implements Asn1Enumerated {
		EXCLUDED(0, "excluded"), REPLACESOTHERCHARGES(1, "replacesOtherCharges"), ADDEDTOOTHERCHARGES(2,
				"addedToOtherCharges");

		private final int index;
		private final String name;

		public boolean hasExtensionMarker() {
			return false;
		}

		private EnumeratedConfigurationFeeType(int index, String name) {
			this.index = index;
			this.name = name;
		}

		public int maxIndex() {
			return 2;
		}
	}

	public static class EnumeratedConfigurationFeeTypeSerializer
			extends
				EnumeratedSerializer<EnumeratedConfigurationFeeType> {
		EnumeratedConfigurationFeeTypeSerializer() {
			super(EnumeratedConfigurationFeeType.class);
		}
	}

	public static class EnumeratedConfigurationFeeTypeDeserializer
			extends
				EnumeratedDeserializer<EnumeratedConfigurationFeeType> {
		EnumeratedConfigurationFeeTypeDeserializer() {
			super(EnumeratedConfigurationFeeType.class);
		}

		@Override
		protected EnumeratedConfigurationFeeType[] listEnumValues() {
			return EnumeratedConfigurationFeeType.values();
		}
	}

	public ConfigInfo() {
		super(true);
	}
}