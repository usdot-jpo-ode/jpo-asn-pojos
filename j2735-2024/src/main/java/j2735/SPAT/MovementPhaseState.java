/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package j2735.SPAT;

import asn2pojo.runtime.serialization.EnumeratedDeserializer;
import asn2pojo.runtime.serialization.EnumeratedSerializer;
import asn2pojo.runtime.types.Asn1Enumerated;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import lombok.Getter;

@Getter
@JsonSerialize(using = MovementPhaseState.MovementPhaseStateSerializer.class)
@JsonDeserialize(using = MovementPhaseState.MovementPhaseStateDeserializer.class)
public enum MovementPhaseState implements Asn1Enumerated {
	UNAVAILABLE(0, "unavailable"), DARK(1, "dark"), STOP_THEN_PROCEED(2, "stop-Then-Proceed"), STOP_AND_REMAIN(3,
			"stop-And-Remain"), PRE_MOVEMENT(4, "pre-Movement"), PERMISSIVE_MOVEMENT_ALLOWED(5,
					"permissive-Movement-Allowed"), PROTECTED_MOVEMENT_ALLOWED(6,
							"protected-Movement-Allowed"), PERMISSIVE_CLEARANCE(7,
									"permissive-clearance"), PROTECTED_CLEARANCE(8,
											"protected-clearance"), CAUTION_CONFLICTING_TRAFFIC(9,
													"caution-Conflicting-Traffic");

	private final int index;
	private final String name;

	private MovementPhaseState(int index, String name) {
		this.index = index;
		this.name = name;
	}

	public static class MovementPhaseStateSerializer extends EnumeratedSerializer<MovementPhaseState> {
		public MovementPhaseStateSerializer() {
			super(MovementPhaseState.class);
		}
	}

	public static class MovementPhaseStateDeserializer extends EnumeratedDeserializer<MovementPhaseState> {
		public MovementPhaseStateDeserializer() {
			super(MovementPhaseState.class);
		}

		@Override
		protected MovementPhaseState[] listEnumValues() {
			return MovementPhaseState.values();
		}
	}
}