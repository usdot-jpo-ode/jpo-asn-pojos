/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package j2735.ProbeDataReport;

import asn2pojo.runtime.annotations.Asn1Property;
import asn2pojo.runtime.types.Asn1Choice;
import asn2pojo.runtime.types.Asn1Null;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@JsonInclude(Include.NON_NULL)
public class RptRoadwayEvents extends Asn1Choice {

	@Asn1Property(tag = 0, name = "obstacleDetected")
	@JsonProperty("obstacleDetected")
	private Asn1Null obstacleDetected;
	@Asn1Property(tag = 1, name = "adverseRoadSurface")
	@JsonProperty("adverseRoadSurface")
	private RptRoadRoughness adverseRoadSurface;
	@Asn1Property(tag = 2, name = "trfsigEncounters")
	@JsonProperty("trfsigEncounters")
	private RptTrafficSigEncounters trfsigEncounters;
	@Asn1Property(tag = 3, name = "trfsigLightOut")
	@JsonProperty("trfsigLightOut")
	private Asn1Null trfsigLightOut;
	@Asn1Property(tag = 4, name = "trfsigRoadGeoMismatch")
	@JsonProperty("trfsigRoadGeoMismatch")
	private Asn1Null trfsigRoadGeoMismatch;
	@Asn1Property(tag = 5, name = "roadsignDetection")
	@JsonProperty("roadsignDetection")
	private Asn1Null roadsignDetection;
	@Asn1Property(tag = 6, name = "lowRoadsignReflect")
	@JsonProperty("lowRoadsignReflect")
	private Asn1Null lowRoadsignReflect;
	@Asn1Property(tag = 7, name = "lowLaneMarkReflect")
	@JsonProperty("lowLaneMarkReflect")
	private Asn1Null lowLaneMarkReflect;
	@Asn1Property(tag = 8, name = "roadsignIncnstncy")
	@JsonProperty("roadsignIncnstncy")
	private Asn1Null roadsignIncnstncy;
	@Asn1Property(tag = 9, name = "laneGeoIncnstncy")
	@JsonProperty("laneGeoIncnstncy")
	private Asn1Null laneGeoIncnstncy;
	@Asn1Property(tag = 10, name = "incidentDetect")
	@JsonProperty("incidentDetect")
	private Asn1Null incidentDetect;
	@Asn1Property(tag = 11, name = "workZoneCharDetect")
	@JsonProperty("workZoneCharDetect")
	private Asn1Null workZoneCharDetect;
	@Asn1Property(tag = 12, name = "inclWeatherDetect")
	@JsonProperty("inclWeatherDetect")
	private Asn1Null inclWeatherDetect;
	@Asn1Property(tag = 13, name = "railrdCrossActiv")
	@JsonProperty("railrdCrossActiv")
	private Asn1Null railrdCrossActiv;
	@Asn1Property(tag = 14, name = "drawBridgeActiv")
	@JsonProperty("drawBridgeActiv")
	private Asn1Null drawBridgeActiv;

	public RptRoadwayEvents() {
		super(true);
	}
}