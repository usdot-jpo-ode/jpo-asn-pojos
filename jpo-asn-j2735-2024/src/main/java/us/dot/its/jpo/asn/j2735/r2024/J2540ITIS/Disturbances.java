/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class Disturbances extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public Disturbances() {
    super(0L, 65535L);
  }

  @JsonCreator
  public Disturbances(long value) {
    this();
    this.value = value;
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("assault", 3329L);
      mapBuilder.put("crime", 3330L);
      mapBuilder.put("robbery", 3331L);
      mapBuilder.put("fare-dispute", 3332L);
      mapBuilder.put("shooting", 3333L);
      mapBuilder.put("gunfire-on-roadway", 3334L);
      mapBuilder.put("suicide", 3335L);
      mapBuilder.put("fight", 3336L);
      mapBuilder.put("gang-fight", 3337L);
      mapBuilder.put("person-harassment", 3338L);
      mapBuilder.put("person-injured", 3339L);
      mapBuilder.put("sick-customer", 3363L);
      mapBuilder.put("unruly-passenger", 3340L);
      mapBuilder.put("person-intoxicated", 3341L);
      mapBuilder.put("crowd-control-problem", 3342L);
      mapBuilder.put("demonstration", 3343L);
      mapBuilder.put("march", 3344L);
      mapBuilder.put("public-disturbance", 3345L);
      mapBuilder.put("riot", 3346L);
      mapBuilder.put("civil-unrest", 3347L);
      mapBuilder.put("civil-emergency", 3348L);
      mapBuilder.put("strike", 3349L);
      mapBuilder.put("public-transit-strike", 3350L);
      mapBuilder.put("stampede", 3351L);
      mapBuilder.put("teargas-used", 3352L);
      mapBuilder.put("security-alert", 3353L);
      mapBuilder.put("security-incident", 3354L);
      mapBuilder.put("checkpoint", 3355L);
      mapBuilder.put("bomb-alert", 3356L);
      mapBuilder.put("terrorist-incident", 3357L);
      mapBuilder.put("high-velocity-shell-fire", 3358L);
      mapBuilder.put("explosives-in-use", 3359L);
      mapBuilder.put("air-raid", 3360L);
      mapBuilder.put("weapons-of-mass-destruction-threat", 3361L);
      mapBuilder.put("military-operations", 3362L);
      mapBuilder.put("security-problem-cleared", 3454L);
      mapBuilder.put("traffic-disturbance-cleared", 3455L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(value));
  }

  public static Optional<Disturbances> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(Disturbances::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
