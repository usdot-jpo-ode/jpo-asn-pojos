/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class SpecialEvents extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public SpecialEvents() {
    super(0L, 65535L);
  }

  @JsonCreator
  public SpecialEvents(long value) {
    this();
    this.setValue(value);
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("major-event", 3841L);
      mapBuilder.put("airshow", 3842L);
      mapBuilder.put("hot-air-ballooning", 3843L);
      mapBuilder.put("concert", 3844L);
      mapBuilder.put("state-occasion", 3845L);
      mapBuilder.put("vIP-visit", 3846L);
      mapBuilder.put("show", 3847L);
      mapBuilder.put("festival", 3848L);
      mapBuilder.put("exhibition", 3849L);
      mapBuilder.put("performing-arts", 3850L);
      mapBuilder.put("outdoor-market", 3851L);
      mapBuilder.put("fair", 3852L);
      mapBuilder.put("carnival", 3853L);
      mapBuilder.put("fireworks-display", 3854L);
      mapBuilder.put("trade-expo", 3855L);
      mapBuilder.put("movie-filming", 3856L);
      mapBuilder.put("presidential-visit", 3857L);
      mapBuilder.put("parade", 3858L);
      mapBuilder.put("procession", 3859L);
      mapBuilder.put("funeral-procession", 3860L);
      mapBuilder.put("crowd", 3861L);
      mapBuilder.put("holiday-traffic-crowds", 3862L);
      mapBuilder.put("event-ended", 3967L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(getValue()));
  }

  public static Optional<SpecialEvents> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(SpecialEvents::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
