/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.AbstractMap.SimpleEntry;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class Structures extends Asn1Integer {

  private static final Map<String, Long> nameValueMap =
      Map.ofEntries(
          new SimpleEntry<>("rest-room", 13057L),
          new SimpleEntry<>("mens-rest-room", 13058L),
          new SimpleEntry<>("womens-rest-room", 13059L),
          new SimpleEntry<>("family-rest-room", 13060L),
          new SimpleEntry<>("dam", 13061L),
          new SimpleEntry<>("fish-hatchery", 13062L),
          new SimpleEntry<>("information", 13063L),
          new SimpleEntry<>("lighthouse", 13064L),
          new SimpleEntry<>("lookout-tower", 13065L),
          new SimpleEntry<>("ranger-station", 13066L),
          new SimpleEntry<>("grocery-store", 13068L),
          new SimpleEntry<>("lodging", 13069L),
          new SimpleEntry<>("post-office", 13070L),
          new SimpleEntry<>("picnic-shelter", 13072L),
          new SimpleEntry<>("group-camping", 13073L),
          new SimpleEntry<>("group-picnicking", 13074L),
          new SimpleEntry<>("n24-hour-pharmacy", 13075L),
          new SimpleEntry<>("kennel", 13076L),
          new SimpleEntry<>("laundry-facilities", 13077L),
          new SimpleEntry<>("shower-facilities", 13078L),
          new SimpleEntry<>("amphitheater", 13079L),
          new SimpleEntry<>("stable", 13080L),
          new SimpleEntry<>("hospital", 13081L),
          new SimpleEntry<>("emergency-medical-service-point", 13082L),
          new SimpleEntry<>("library", 13083L),
          new SimpleEntry<>("recycling-collection-center", 13084L),
          new SimpleEntry<>("school", 13085L));
  private static final Map<Long, String> valueNameMap =
      nameValueMap.entrySet().stream()
          .collect(Collectors.toUnmodifiableMap(Map.Entry::getValue, Map.Entry::getKey));

  public Structures() {
    super(0L, 65535L);
  }

  @JsonCreator
  public Structures(long value) {
    this();
    this.value = value;
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(valueNameMap.get(value));
  }

  public static Optional<Structures> named(String name) {
    return Optional.ofNullable(nameValueMap.get(name)).map(Structures::new);
  }

  public static Set<String> names() {
    return nameValueMap.keySet();
  }

  public static Set<Long> namedValues() {
    return valueNameMap.keySet();
  }
}
