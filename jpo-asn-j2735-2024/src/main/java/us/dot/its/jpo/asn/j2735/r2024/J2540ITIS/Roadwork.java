/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class Roadwork extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public Roadwork() {
    super(0L, 65535L);
  }

  @JsonCreator
  public Roadwork(long value) {
    this();
    this.setValue(value);
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("road-construction", 1025L);
      mapBuilder.put("major-road-construction", 1026L);
      mapBuilder.put("long-term-road-construction", 1027L);
      mapBuilder.put("construction-work", 1028L);
      mapBuilder.put("paving-operations", 1029L);
      mapBuilder.put("work-in-the-median", 1030L);
      mapBuilder.put("road-reconstruction", 1031L);
      mapBuilder.put("opposing-traffic", 1032L);
      mapBuilder.put("narrow-lanes", 1033L);
      mapBuilder.put("construction-traffic-merging", 1034L);
      mapBuilder.put("single-line-traffic-alternating-directions", 1035L);
      mapBuilder.put("road-maintenance-operations", 1036L);
      mapBuilder.put("road-marking-operations", 1037L);
      mapBuilder.put("road-widening", 1061L);
      mapBuilder.put("cracks", 1052L);
      mapBuilder.put("crack-REMOVE", 1058L);
      mapBuilder.put("bumps", 1053L);
      mapBuilder.put("drop-off", 1059L);
      mapBuilder.put("storm-drain", 1054L);
      mapBuilder.put("bridge-maintenance-operations", 1038L);
      mapBuilder.put("bridge-construction", 1039L);
      mapBuilder.put("bridge-demolition-work", 1040L);
      mapBuilder.put("seismic-retrofit", 1060L);
      mapBuilder.put("overgrown-grass", 1055L);
      mapBuilder.put("overgrown-brushshrubs", 1056L);
      mapBuilder.put("overgrown-trees", 1057L);
      mapBuilder.put("blasting", 1041L);
      mapBuilder.put("avalanche-control-activities", 1042L);
      mapBuilder.put("water-main-work", 1043L);
      mapBuilder.put("gas-main-work", 1044L);
      mapBuilder.put("work-on-underground-cables", 1045L);
      mapBuilder.put("work-on-underground-services", 1046L);
      mapBuilder.put("new-road-construction-layout", 1047L);
      mapBuilder.put("new-road-layout", 1048L);
      mapBuilder.put("temporary-lane-markings", 1049L);
      mapBuilder.put("temporary-traffic-lights", 1050L);
      mapBuilder.put("emergency-maintenance", 1051L);
      mapBuilder.put("utility-work", 1062L);
      mapBuilder.put("road-maintenance-cleared", 1146L);
      mapBuilder.put("normal-road-layout-restored", 1147L);
      mapBuilder.put("road-work-clearance-in-progress", 1148L);
      mapBuilder.put("road-construction-cleared", 1149L);
      mapBuilder.put("normal-traffic-lanes-restored", 1150L);
      mapBuilder.put("road-work-cleared", 1151L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(getValue()));
  }

  public static Optional<Roadwork> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(Roadwork::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
