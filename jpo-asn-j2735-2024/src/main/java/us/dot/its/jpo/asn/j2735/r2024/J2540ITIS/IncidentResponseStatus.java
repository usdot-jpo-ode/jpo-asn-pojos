/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class IncidentResponseStatus extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public IncidentResponseStatus() {
    super(0L, 65535L);
  }

  @JsonCreator
  public IncidentResponseStatus(long value) {
    this();
    this.setValue(value);
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("unconfirmed-report", 2817L);
      mapBuilder.put("initial-response-en-route", 2818L);
      mapBuilder.put("follow-up-response-en-route", 2819L);
      mapBuilder.put("initial-response-on-scene", 2820L);
      mapBuilder.put("follow-up-response-on-scene", 2821L);
      mapBuilder.put("confirmed-report", 2822L);
      mapBuilder.put("scene-is-unsecured-at-this-time", 2823L);
      mapBuilder.put("response-scene-secured", 2824L);
      mapBuilder.put("rescue-and-recovery-work-in-progress", 2825L);
      mapBuilder.put("extraction-in-progress", 2826L);
      mapBuilder.put("clearance-work-in-progress", 2827L);
      mapBuilder.put("body-removal-operations", 2828L);
      mapBuilder.put("fire-containment-contained", 2829L);
      mapBuilder.put("fire-containment-not-contained", 2830L);
      mapBuilder.put("event-cleared", 2831L);
      mapBuilder.put("traffic-clearing", 2832L);
      mapBuilder.put("incident-closed", 2833L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(getValue()));
  }

  public static Optional<IncidentResponseStatus> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(IncidentResponseStatus::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
