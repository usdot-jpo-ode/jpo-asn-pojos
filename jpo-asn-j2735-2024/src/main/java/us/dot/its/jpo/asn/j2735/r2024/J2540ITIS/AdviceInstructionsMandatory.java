/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class AdviceInstructionsMandatory extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public AdviceInstructionsMandatory() {
    super(0L, 65535L);
  }

  @JsonCreator
  public AdviceInstructionsMandatory(long value) {
    this();
    this.setValue(value);
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("keep-to-the-right", 7425L);
      mapBuilder.put("keep-to-the-left", 7426L);
      mapBuilder.put("use-right-lane", 7427L);
      mapBuilder.put("use-left-lane", 7428L);
      mapBuilder.put("stay-in-lane", 7450L);
      mapBuilder.put("merge", 7451L);
      mapBuilder.put("heavy-vehicles-use-right-lane", 7429L);
      mapBuilder.put("heavy-vehicles-use-left-lane", 7430L);
      mapBuilder.put("observe-signals", 7431L);
      mapBuilder.put("observe-signs", 7432L);
      mapBuilder.put("no-passing", 7433L);
      mapBuilder.put("no-smoking", 7434L);
      mapBuilder.put("no-open-flames", 7435L);
      mapBuilder.put("use-shoulder-as-lane", 7436L);
      mapBuilder.put("do-not-drive-on-the-shoulder", 7437L);
      mapBuilder.put("allow-emergency-vehicles-to-pass", 7438L);
      mapBuilder.put("clear-a-lane-for-emergency-vehicles", 7439L);
      mapBuilder.put("pull-over-to-the-edge-of-the-roadway", 7440L);
      mapBuilder.put("wait-for-escort-vehicle", 7441L);
      mapBuilder.put("in-emergency-wait-for-police-patrol", 7442L);
      mapBuilder.put("reduce-your-speed", 7443L);
      mapBuilder.put("observe-speed-limits", 7444L);
      mapBuilder.put("check-point", 7445L);
      mapBuilder.put("entry-requirements", 7446L);
      mapBuilder.put("insurance-requirements", 7447L);
      mapBuilder.put("firearms-requirements", 7448L);
      mapBuilder.put("pet-requirements", 7449L);
      mapBuilder.put("slower-traffic-keep-right", 7452L);
      mapBuilder.put("keep-off", 7453L);
      mapBuilder.put("evacuate-area-immediately", 7454L);
      mapBuilder.put("shoulder-travel-no-longer-allowed", 7547L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(getValue()));
  }

  public static Optional<AdviceInstructionsMandatory> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(AdviceInstructionsMandatory::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
