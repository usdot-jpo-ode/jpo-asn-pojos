/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class PavementConditions extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public PavementConditions() {
    super(0L, 65535L);
  }

  @JsonCreator
  public PavementConditions(long value) {
    this();
    this.setValue(value);
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("impassable", 5889L);
      mapBuilder.put("almost-impassable", 5890L);
      mapBuilder.put("passable-with-care", 5891L);
      mapBuilder.put("passable", 5892L);
      mapBuilder.put("surface-water-hazard", 5893L);
      mapBuilder.put("danger-of-hydroplaning", 5894L);
      mapBuilder.put("wet-pavement", 5895L);
      mapBuilder.put("treated-pavement", 5896L);
      mapBuilder.put("slippery", 5897L);
      mapBuilder.put("low-ground-clearance", 5938L);
      mapBuilder.put("at-grade-level-crossing", 5937L);
      mapBuilder.put("mud-on-roadway", 5898L);
      mapBuilder.put("leaves-on-roadway", 5899L);
      mapBuilder.put("loose-sand-on-roadway", 5900L);
      mapBuilder.put("loose-gravel", 5901L);
      mapBuilder.put("fuel-on-roadway", 5902L);
      mapBuilder.put("oil-on-roadway", 5903L);
      mapBuilder.put("road-surface-in-poor-condition", 5904L);
      mapBuilder.put("melting-tar", 5905L);
      mapBuilder.put("uneven-lanes", 5935L);
      mapBuilder.put("rough-road", 5931L);
      mapBuilder.put("rough-crossing", 5936L);
      mapBuilder.put("ice", 5906L);
      mapBuilder.put("icy-patches", 5907L);
      mapBuilder.put("black-ice", 5908L);
      mapBuilder.put("ice-pellets-on-roadway", 5909L);
      mapBuilder.put("ice-build-up", 5910L);
      mapBuilder.put("freezing-rain", 5911L);
      mapBuilder.put("wet-and-icy-roads", 5912L);
      mapBuilder.put("slush", 5914L);
      mapBuilder.put("melting-snow", 5913L);
      mapBuilder.put("frozen-slush", 5915L);
      mapBuilder.put("snow-on-roadway", 5916L);
      mapBuilder.put("packed-snow", 5917L);
      mapBuilder.put("packed-snow-patches", 5918L);
      mapBuilder.put("plowed-snow", 5919L);
      mapBuilder.put("wet-snow", 5920L);
      mapBuilder.put("fresh-snow", 5921L);
      mapBuilder.put("powder-snow", 5922L);
      mapBuilder.put("granular-snow", 5923L);
      mapBuilder.put("frozen-snow", 5924L);
      mapBuilder.put("crusted-snow", 5925L);
      mapBuilder.put("deep-snow", 5926L);
      mapBuilder.put("snow-drifts", 5927L);
      mapBuilder.put("drifting-snow", 5928L);
      mapBuilder.put("expected-snow-accumulation", 5929L);
      mapBuilder.put("current-snow-accumulation", 5930L);
      mapBuilder.put("sand", 5932L);
      mapBuilder.put("gravel", 5933L);
      mapBuilder.put("paved", 5934L);
      mapBuilder.put("dry-pavement", 6011L);
      mapBuilder.put("snow-cleared", 6012L);
      mapBuilder.put("pavement-conditions-improved", 6013L);
      mapBuilder.put("skid-hazard-reduced", 6014L);
      mapBuilder.put("pavement-conditions-cleared", 6015L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(getValue()));
  }

  public static Optional<PavementConditions> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(PavementConditions::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
