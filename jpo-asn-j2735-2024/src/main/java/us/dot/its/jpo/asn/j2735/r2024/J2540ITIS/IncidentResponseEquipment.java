/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class IncidentResponseEquipment extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public IncidentResponseEquipment() {
    super(0L, 65535L);
  }

  @JsonCreator
  public IncidentResponseEquipment(long value) {
    this();
    this.setValue(value);
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("ground-fire-suppression", 9985L);
      mapBuilder.put("heavy-ground-equipment", 9986L);
      mapBuilder.put("aircraft", 9988L);
      mapBuilder.put("marine-equipment", 9989L);
      mapBuilder.put("support-equipment", 9990L);
      mapBuilder.put("medical-rescue-unit", 9991L);
      mapBuilder.put("other", 9993L);
      mapBuilder.put("ground-fire-suppression-other", 9994L);
      mapBuilder.put("engine", 9995L);
      mapBuilder.put("truck-or-aerial", 9996L);
      mapBuilder.put("quint", 9997L);
      mapBuilder.put("tanker-pumper-combination", 9998L);
      mapBuilder.put("brush-truck", 10000L);
      mapBuilder.put("aircraft-rescue-firefighting", 10001L);
      mapBuilder.put("heavy-ground-equipment-other", 10004L);
      mapBuilder.put("dozer-or-plow", 10005L);
      mapBuilder.put("tractor", 10006L);
      mapBuilder.put("tanker-or-tender", 10008L);
      mapBuilder.put("aircraft-other", 10024L);
      mapBuilder.put("aircraft-fixed-wing-tanker", 10025L);
      mapBuilder.put("helitanker", 10026L);
      mapBuilder.put("helicopter", 10027L);
      mapBuilder.put("marine-equipment-other", 10034L);
      mapBuilder.put("fire-boat-with-pump", 10035L);
      mapBuilder.put("boat-no-pump", 10036L);
      mapBuilder.put("support-apparatus-other", 10044L);
      mapBuilder.put("breathing-apparatus-support", 10045L);
      mapBuilder.put("light-and-air-unit", 10046L);
      mapBuilder.put("medical-rescue-unit-other", 10054L);
      mapBuilder.put("rescue-unit", 10055L);
      mapBuilder.put("urban-search-rescue-unit", 10056L);
      mapBuilder.put("high-angle-rescue", 10057L);
      mapBuilder.put("crash-fire-rescue", 10058L);
      mapBuilder.put("bLS-unit", 10059L);
      mapBuilder.put("aLS-unit", 10060L);
      mapBuilder.put("mobile-command-post", 10075L);
      mapBuilder.put("chief-officer-car", 10076L);
      mapBuilder.put("hAZMAT-unit", 10077L);
      mapBuilder.put("type-i-hand-crew", 10078L);
      mapBuilder.put("type-ii-hand-crew", 10079L);
      mapBuilder.put("privately-owned-vehicle", 10083L);
      mapBuilder.put("other-apparatus-resource", 10084L);
      mapBuilder.put("ambulance", 10085L);
      mapBuilder.put("bomb-squad-van", 10086L);
      mapBuilder.put("combine-harvester", 10087L);
      mapBuilder.put("construction-vehicle", 10088L);
      mapBuilder.put("farm-tractor", 10089L);
      mapBuilder.put("grass-cutting-machines", 10090L);
      mapBuilder.put("hAZMAT-containment-tow", 10091L);
      mapBuilder.put("heavy-tow", 10092L);
      mapBuilder.put("light-tow", 10094L);
      mapBuilder.put("flatbed-tow", 10114L);
      mapBuilder.put("hedge-cutting-machines", 10093L);
      mapBuilder.put("mobile-crane", 10095L);
      mapBuilder.put("refuse-collection-vehicle", 10096L);
      mapBuilder.put("resurfacing-vehicle", 10097L);
      mapBuilder.put("road-sweeper", 10098L);
      mapBuilder.put("survey-crews", 10115L);
      mapBuilder.put("roadside-litter-collection-crews", 10099L);
      mapBuilder.put("salvage-vehicle", 10100L);
      mapBuilder.put("sand-truck", 10101L);
      mapBuilder.put("snowplow", 10102L);
      mapBuilder.put("steam-roller", 10103L);
      mapBuilder.put("swat-team-van", 10104L);
      mapBuilder.put("track-laying-vehicle", 10105L);
      mapBuilder.put("unknown-vehicle", 10106L);
      mapBuilder.put("white-lining-vehicle", 10107L);
      mapBuilder.put("dump-truck", 10108L);
      mapBuilder.put("supervisor-vehicle", 10109L);
      mapBuilder.put("snow-blower", 10110L);
      mapBuilder.put("rotary-snow-blower", 10111L);
      mapBuilder.put("road-grader", 10112L);
      mapBuilder.put("steam-truck", 10113L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(getValue()));
  }

  public static Optional<IncidentResponseEquipment> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(IncidentResponseEquipment::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
