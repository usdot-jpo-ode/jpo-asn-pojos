/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class UnusualDriving extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public UnusualDriving() {
    super(0L, 65535L);
  }

  @JsonCreator
  public UnusualDriving(long value) {
    this();
    this.value = value;
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("vehicle-traveling-wrong-way", 1793L);
      mapBuilder.put("reckless-driver", 1794L);
      mapBuilder.put("prohibited-vehicle-on-roadway", 1795L);
      mapBuilder.put("emergency-vehicles-on-roadway", 1796L);
      mapBuilder.put("high-speed-emergency-vehicles", 1797L);
      mapBuilder.put("high-speed-chase", 1798L);
      mapBuilder.put("dangerous-vehicle-warning-cleared", 1918L);
      mapBuilder.put("emergency-vehicle-warning-cleared", 1919L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(value));
  }

  public static Optional<UnusualDriving> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(UnusualDriving::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
