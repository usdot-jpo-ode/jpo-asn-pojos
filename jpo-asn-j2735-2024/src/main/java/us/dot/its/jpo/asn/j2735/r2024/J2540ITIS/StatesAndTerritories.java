/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class StatesAndTerritories extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public StatesAndTerritories() {
    super(0L, 65535L);
  }

  @JsonCreator
  public StatesAndTerritories(long value) {
    this();
    this.value = value;
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("alabama", 12801L);
      mapBuilder.put("alaska", 12802L);
      mapBuilder.put("american-Samoa", 12803L);
      mapBuilder.put("arizona", 12804L);
      mapBuilder.put("arkansas", 12805L);
      mapBuilder.put("california", 12806L);
      mapBuilder.put("colorado", 12807L);
      mapBuilder.put("connecticut", 12808L);
      mapBuilder.put("delaware", 12809L);
      mapBuilder.put("district-of-Columbia", 12810L);
      mapBuilder.put("florida", 12811L);
      mapBuilder.put("georgia", 12812L);
      mapBuilder.put("guam", 12813L);
      mapBuilder.put("hawaii", 12814L);
      mapBuilder.put("idaho", 12815L);
      mapBuilder.put("illinois", 12816L);
      mapBuilder.put("indiana", 12817L);
      mapBuilder.put("iowa", 12818L);
      mapBuilder.put("kansas", 12819L);
      mapBuilder.put("kentucky", 12820L);
      mapBuilder.put("louisiana", 12821L);
      mapBuilder.put("maine", 12822L);
      mapBuilder.put("maryland", 12823L);
      mapBuilder.put("massachusetts", 12824L);
      mapBuilder.put("michigan", 12825L);
      mapBuilder.put("minnesota", 12826L);
      mapBuilder.put("mississippi", 12827L);
      mapBuilder.put("missouri", 12828L);
      mapBuilder.put("montana", 12829L);
      mapBuilder.put("nebraska", 12830L);
      mapBuilder.put("nevada", 12831L);
      mapBuilder.put("new-Hampshire", 12832L);
      mapBuilder.put("new-Jersey", 12833L);
      mapBuilder.put("new-Mexico", 12834L);
      mapBuilder.put("new-York", 12835L);
      mapBuilder.put("north-Carolina", 12836L);
      mapBuilder.put("north-Dakota", 12837L);
      mapBuilder.put("northern-Marianas-Islands", 12838L);
      mapBuilder.put("ohio", 12839L);
      mapBuilder.put("oklahoma", 12840L);
      mapBuilder.put("oregon", 12841L);
      mapBuilder.put("pennsylvania", 12842L);
      mapBuilder.put("puerto-rico", 12843L);
      mapBuilder.put("rhode-Island", 12844L);
      mapBuilder.put("south-Carolina", 12845L);
      mapBuilder.put("south-Dakota", 12846L);
      mapBuilder.put("tennessee", 12847L);
      mapBuilder.put("texas", 12848L);
      mapBuilder.put("utah", 12849L);
      mapBuilder.put("vermont", 12850L);
      mapBuilder.put("virginia", 12851L);
      mapBuilder.put("virgin-Islands", 12852L);
      mapBuilder.put("washington", 12853L);
      mapBuilder.put("west-Virginia", 12854L);
      mapBuilder.put("wisconsin", 12855L);
      mapBuilder.put("wyoming", 12856L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(value));
  }

  public static Optional<StatesAndTerritories> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(StatesAndTerritories::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
