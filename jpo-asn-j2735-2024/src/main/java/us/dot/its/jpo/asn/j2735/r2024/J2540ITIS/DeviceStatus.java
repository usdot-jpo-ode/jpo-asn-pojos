/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class DeviceStatus extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public DeviceStatus() {
    super(0L, 65535L);
  }

  @JsonCreator
  public DeviceStatus(long value) {
    this();
    this.setValue(value);
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("lane-control-signs-not-working", 2305L);
      mapBuilder.put("lane-control-signs-working-incorrectly", 2306L);
      mapBuilder.put("lane-control-signs-operating", 2307L);
      mapBuilder.put("variable-message-signs-not-working", 2308L);
      mapBuilder.put("variable-message-signs-working-incorrectly", 2309L);
      mapBuilder.put("variable-message-signs-operating", 2310L);
      mapBuilder.put("emergency-telephones-not-working", 2311L);
      mapBuilder.put("emergency-telephone-number-not-working", 2312L);
      mapBuilder.put("traffic-lights-not-working", 2313L);
      mapBuilder.put("traffic-lights-working-incorrectly", 2314L);
      mapBuilder.put("ramp-control-signals-not-working", 2315L);
      mapBuilder.put("ramp-control-signals-working-incorrectly", 2316L);
      mapBuilder.put("temporary-traffic-lights-not-working", 2317L);
      mapBuilder.put("temporary-traffic-lights-working-incorrectly", 2318L);
      mapBuilder.put("traffic-signal-control-computer-not-working", 2319L);
      mapBuilder.put("traffic-signal-timings-changed", 2320L);
      mapBuilder.put("overheight-warning-system-triggered", 2321L);
      mapBuilder.put("equipment-failure", 2322L);
      mapBuilder.put("railroad-crossing-equipment-failure", 2323L);
      mapBuilder.put("tunnel-ventilation-not-working", 2324L);
      mapBuilder.put("power-failure", 2325L);
      mapBuilder.put("widespread-power-outages", 2326L);
      mapBuilder.put("technical-problems", 2327L);
      mapBuilder.put("sign-down", 2328L);
      mapBuilder.put("lines-in-road-faded", 2329L);
      mapBuilder.put("damaged-light-standard", 2330L);
      mapBuilder.put("traffic-signal-stuck-on-flash", 2331L);
      mapBuilder.put("guide-rail", 2332L);
      mapBuilder.put("fencing", 2333L);
      mapBuilder.put("light-standard-hanging-by-wires", 2334L);
      mapBuilder.put("call-box", 2335L);
      mapBuilder.put("signal-cabinet", 2336L);
      mapBuilder.put("detector", 2337L);
      mapBuilder.put("improper-use-of-State-vehicle-or-equipment", 2338L);
      mapBuilder.put("bulb-out", 2339L);
      mapBuilder.put("not-yet-operational", 2340L);
      mapBuilder.put("not-yet-installed", 2341L);
      mapBuilder.put("electronic-signs-repaired", 2428L);
      mapBuilder.put("emergency-call-facilities-restored", 2429L);
      mapBuilder.put("traffic-signals-repaired", 2430L);
      mapBuilder.put("railroad-crossing-equipment-now-working-normally", 2431L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(getValue()));
  }

  public static Optional<DeviceStatus> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(DeviceStatus::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
