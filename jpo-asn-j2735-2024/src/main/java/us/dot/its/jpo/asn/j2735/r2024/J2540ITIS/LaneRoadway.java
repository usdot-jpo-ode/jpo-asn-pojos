/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.AbstractMap.SimpleEntry;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class LaneRoadway extends Asn1Integer {

  private static final Map<String, Long> nameValueMap =
      Map.ofEntries(
          new SimpleEntry<>("all-roadways", 8193L),
          new SimpleEntry<>("through-lanes", 8194L),
          new SimpleEntry<>("left-lane", 8195L),
          new SimpleEntry<>("right-lane", 8196L),
          new SimpleEntry<>("center-lane", 8197L),
          new SimpleEntry<>("middle-lanes", 8198L),
          new SimpleEntry<>("middle-two-lanes", 8199L),
          new SimpleEntry<>("right-turning-lanes", 8200L),
          new SimpleEntry<>("left-turning-lanes", 8201L),
          new SimpleEntry<>("upper-deck-lanes", 8236L),
          new SimpleEntry<>("lower-deck-lanes", 8237L),
          new SimpleEntry<>("reversible-lanes", 8238L),
          new SimpleEntry<>("right-exit-lanes", 8239L),
          new SimpleEntry<>("left-exit-lanes", 8240L),
          new SimpleEntry<>("right-merging-lanes", 8241L),
          new SimpleEntry<>("left-merging-lanes", 8242L),
          new SimpleEntry<>("right-exit-ramp", 8202L),
          new SimpleEntry<>("right-second-exit-ramp", 8243L),
          new SimpleEntry<>("right-entrance-ramp", 8203L),
          new SimpleEntry<>("right-second-entrance-ramp", 8245L),
          new SimpleEntry<>("left-exit-ramp", 8204L),
          new SimpleEntry<>("left-second-exit-ramp", 8244L),
          new SimpleEntry<>("left-entrance-ramp", 8205L),
          new SimpleEntry<>("left-second-entrance-ramp", 8246L),
          new SimpleEntry<>("escape-ramp", 8234L),
          new SimpleEntry<>("hard-shoulder", 8206L),
          new SimpleEntry<>("soft-shoulder", 8207L),
          new SimpleEntry<>("right-shoulder", 8208L),
          new SimpleEntry<>("left-shoulder", 8209L),
          new SimpleEntry<>("median", 8252L),
          new SimpleEntry<>("sidewalk", 8251L),
          new SimpleEntry<>("highways", 8235L),
          new SimpleEntry<>("right-hand-parallel-lanes", 8210L),
          new SimpleEntry<>("left-hand-parallel-lanes", 8211L),
          new SimpleEntry<>("connecting-lanes", 8212L),
          new SimpleEntry<>("express-lanes", 8213L),
          new SimpleEntry<>("local-lanes", 8214L),
          new SimpleEntry<>("toll-lanes", 8215L),
          new SimpleEntry<>("electronic-toll-lanes", 8216L),
          new SimpleEntry<>("toll-plaza", 8217L),
          new SimpleEntry<>("inspection-lane", 8218L),
          new SimpleEntry<>("hOV-lanes", 8219L),
          new SimpleEntry<>("bus-lanes", 8220L),
          new SimpleEntry<>("carpool-lanes", 8221L),
          new SimpleEntry<>("truck-lanes", 8222L),
          new SimpleEntry<>("emergency-lanes", 8223L),
          new SimpleEntry<>("passing-lanes", 8224L),
          new SimpleEntry<>("climbing-lanes", 8225L),
          new SimpleEntry<>("slow-lane", 8226L),
          new SimpleEntry<>("service-road", 8227L),
          new SimpleEntry<>("cycle-lane", 8228L),
          new SimpleEntry<>("tracks", 8250L),
          new SimpleEntry<>("bridge", 8229L),
          new SimpleEntry<>("overpass", 8230L),
          new SimpleEntry<>("elevated-lanes", 8231L),
          new SimpleEntry<>("underpass", 8232L),
          new SimpleEntry<>("tunnel", 8233L),
          new SimpleEntry<>("all-exit-lanes", 8247L),
          new SimpleEntry<>("all-entry-lanes", 8248L),
          new SimpleEntry<>("either-shoulder", 8249L),
          new SimpleEntry<>("shoulder-work", 8253L));
  private static final Map<Long, String> valueNameMap =
      nameValueMap.entrySet().stream()
          .collect(Collectors.toUnmodifiableMap(Map.Entry::getValue, Map.Entry::getKey));

  public LaneRoadway() {
    super(0L, 65535L);
  }

  @JsonCreator
  public LaneRoadway(long value) {
    this();
    this.value = value;
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(valueNameMap.get(value));
  }

  public static Optional<LaneRoadway> named(String name) {
    return Optional.ofNullable(nameValueMap.get(name)).map(LaneRoadway::new);
  }

  public static Set<String> names() {
    return nameValueMap.keySet();
  }

  public static Set<Long> namedValues() {
    return valueNameMap.keySet();
  }
}
