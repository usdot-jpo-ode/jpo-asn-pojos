/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class LaneRoadway extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public LaneRoadway() {
    super(0L, 65535L);
  }

  @JsonCreator
  public LaneRoadway(long value) {
    this();
    this.setValue(value);
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("all-roadways", 8193L);
      mapBuilder.put("through-lanes", 8194L);
      mapBuilder.put("left-lane", 8195L);
      mapBuilder.put("right-lane", 8196L);
      mapBuilder.put("center-lane", 8197L);
      mapBuilder.put("middle-lanes", 8198L);
      mapBuilder.put("middle-two-lanes", 8199L);
      mapBuilder.put("right-turning-lanes", 8200L);
      mapBuilder.put("left-turning-lanes", 8201L);
      mapBuilder.put("upper-deck-lanes", 8236L);
      mapBuilder.put("lower-deck-lanes", 8237L);
      mapBuilder.put("reversible-lanes", 8238L);
      mapBuilder.put("right-exit-lanes", 8239L);
      mapBuilder.put("left-exit-lanes", 8240L);
      mapBuilder.put("right-merging-lanes", 8241L);
      mapBuilder.put("left-merging-lanes", 8242L);
      mapBuilder.put("right-exit-ramp", 8202L);
      mapBuilder.put("right-second-exit-ramp", 8243L);
      mapBuilder.put("right-entrance-ramp", 8203L);
      mapBuilder.put("right-second-entrance-ramp", 8245L);
      mapBuilder.put("left-exit-ramp", 8204L);
      mapBuilder.put("left-second-exit-ramp", 8244L);
      mapBuilder.put("left-entrance-ramp", 8205L);
      mapBuilder.put("left-second-entrance-ramp", 8246L);
      mapBuilder.put("escape-ramp", 8234L);
      mapBuilder.put("hard-shoulder", 8206L);
      mapBuilder.put("soft-shoulder", 8207L);
      mapBuilder.put("right-shoulder", 8208L);
      mapBuilder.put("left-shoulder", 8209L);
      mapBuilder.put("median", 8252L);
      mapBuilder.put("sidewalk", 8251L);
      mapBuilder.put("highways", 8235L);
      mapBuilder.put("right-hand-parallel-lanes", 8210L);
      mapBuilder.put("left-hand-parallel-lanes", 8211L);
      mapBuilder.put("connecting-lanes", 8212L);
      mapBuilder.put("express-lanes", 8213L);
      mapBuilder.put("local-lanes", 8214L);
      mapBuilder.put("toll-lanes", 8215L);
      mapBuilder.put("electronic-toll-lanes", 8216L);
      mapBuilder.put("toll-plaza", 8217L);
      mapBuilder.put("inspection-lane", 8218L);
      mapBuilder.put("hOV-lanes", 8219L);
      mapBuilder.put("bus-lanes", 8220L);
      mapBuilder.put("carpool-lanes", 8221L);
      mapBuilder.put("truck-lanes", 8222L);
      mapBuilder.put("emergency-lanes", 8223L);
      mapBuilder.put("passing-lanes", 8224L);
      mapBuilder.put("climbing-lanes", 8225L);
      mapBuilder.put("slow-lane", 8226L);
      mapBuilder.put("service-road", 8227L);
      mapBuilder.put("cycle-lane", 8228L);
      mapBuilder.put("tracks", 8250L);
      mapBuilder.put("bridge", 8229L);
      mapBuilder.put("overpass", 8230L);
      mapBuilder.put("elevated-lanes", 8231L);
      mapBuilder.put("underpass", 8232L);
      mapBuilder.put("tunnel", 8233L);
      mapBuilder.put("all-exit-lanes", 8247L);
      mapBuilder.put("all-entry-lanes", 8248L);
      mapBuilder.put("either-shoulder", 8249L);
      mapBuilder.put("shoulder-work", 8253L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(getValue()));
  }

  public static Optional<LaneRoadway> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(LaneRoadway::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
