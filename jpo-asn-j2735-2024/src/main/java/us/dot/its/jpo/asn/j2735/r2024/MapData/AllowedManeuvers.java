/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.MapData;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import us.dot.its.jpo.asn.runtime.serialization.BitStringDeserializer;
import us.dot.its.jpo.asn.runtime.types.Asn1Bitstring;

@JsonDeserialize(using = AllowedManeuvers.AllowedManeuversDeserializer.class)
public class AllowedManeuvers extends Asn1Bitstring {

	public boolean isManeuverStraightAllowed() {
		return get(0);
	}

	public void setManeuverStraightAllowed(boolean maneuverStraightAllowed) {
		set(0, maneuverStraightAllowed);
	}

	public boolean isManeuverLeftAllowed() {
		return get(1);
	}

	public void setManeuverLeftAllowed(boolean maneuverLeftAllowed) {
		set(1, maneuverLeftAllowed);
	}

	public boolean isManeuverRightAllowed() {
		return get(2);
	}

	public void setManeuverRightAllowed(boolean maneuverRightAllowed) {
		set(2, maneuverRightAllowed);
	}

	public boolean isManeuverUTurnAllowed() {
		return get(3);
	}

	public void setManeuverUTurnAllowed(boolean maneuverUTurnAllowed) {
		set(3, maneuverUTurnAllowed);
	}

	public boolean isManeuverLeftTurnOnRedAllowed() {
		return get(4);
	}

	public void setManeuverLeftTurnOnRedAllowed(boolean maneuverLeftTurnOnRedAllowed) {
		set(4, maneuverLeftTurnOnRedAllowed);
	}

	public boolean isManeuverRightTurnOnRedAllowed() {
		return get(5);
	}

	public void setManeuverRightTurnOnRedAllowed(boolean maneuverRightTurnOnRedAllowed) {
		set(5, maneuverRightTurnOnRedAllowed);
	}

	public boolean isManeuverLaneChangeAllowed() {
		return get(6);
	}

	public void setManeuverLaneChangeAllowed(boolean maneuverLaneChangeAllowed) {
		set(6, maneuverLaneChangeAllowed);
	}

	public boolean isManeuverNoStoppingAllowed() {
		return get(7);
	}

	public void setManeuverNoStoppingAllowed(boolean maneuverNoStoppingAllowed) {
		set(7, maneuverNoStoppingAllowed);
	}

	public boolean isYieldAllwaysRequired() {
		return get(8);
	}

	public void setYieldAllwaysRequired(boolean yieldAllwaysRequired) {
		set(8, yieldAllwaysRequired);
	}

	public boolean isGoWithHalt() {
		return get(9);
	}

	public void setGoWithHalt(boolean goWithHalt) {
		set(9, goWithHalt);
	}

	public boolean isCaution() {
		return get(10);
	}

	public void setCaution(boolean caution) {
		set(10, caution);
	}

	public boolean isReserved1() {
		return get(11);
	}

	public void setReserved1(boolean reserved1) {
		set(11, reserved1);
	}

	public AllowedManeuvers() {
		super(12, false,
				new String[]{"maneuverStraightAllowed", "maneuverLeftAllowed", "maneuverRightAllowed",
						"maneuverUTurnAllowed", "maneuverLeftTurnOnRedAllowed", "maneuverRightTurnOnRedAllowed",
						"maneuverLaneChangeAllowed", "maneuverNoStoppingAllowed", "yieldAllwaysRequired", "goWithHalt",
						"caution", "reserved1"});
	}

	public static class AllowedManeuversDeserializer extends BitStringDeserializer<AllowedManeuvers> {
		public AllowedManeuversDeserializer() {
			super(AllowedManeuvers.class);
		}

		@Override
		protected AllowedManeuvers construct() {
			return new AllowedManeuvers();
		}
	}
}