/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.MapData;

import us.dot.its.jpo.asn.runtime.types.Asn1Bitstring;

public class LaneAttributes_Striping extends Asn1Bitstring {

  public boolean isStripeToConnectingLanesRevocableLane() {
    return get(0);
  }

  public void setStripeToConnectingLanesRevocableLane(
      boolean stripeToConnectingLanesRevocableLane) {
    set(0, stripeToConnectingLanesRevocableLane);
  }

  public boolean isStripeDrawOnLeft() {
    return get(1);
  }

  public void setStripeDrawOnLeft(boolean stripeDrawOnLeft) {
    set(1, stripeDrawOnLeft);
  }

  public boolean isStripeDrawOnRight() {
    return get(2);
  }

  public void setStripeDrawOnRight(boolean stripeDrawOnRight) {
    set(2, stripeDrawOnRight);
  }

  public boolean isStripeToConnectingLanesLeft() {
    return get(3);
  }

  public void setStripeToConnectingLanesLeft(boolean stripeToConnectingLanesLeft) {
    set(3, stripeToConnectingLanesLeft);
  }

  public boolean isStripeToConnectingLanesRight() {
    return get(4);
  }

  public void setStripeToConnectingLanesRight(boolean stripeToConnectingLanesRight) {
    set(4, stripeToConnectingLanesRight);
  }

  public boolean isStripeToConnectingLanesAhead() {
    return get(5);
  }

  public void setStripeToConnectingLanesAhead(boolean stripeToConnectingLanesAhead) {
    set(5, stripeToConnectingLanesAhead);
  }

  public LaneAttributes_Striping() {
    super(
        16,
        false,
        new String[] {
          "stripeToConnectingLanesRevocableLane",
          "stripeDrawOnLeft",
          "stripeDrawOnRight",
          "stripeToConnectingLanesLeft",
          "stripeToConnectingLanesRight",
          "stripeToConnectingLanesAhead"
        });
  }

}
