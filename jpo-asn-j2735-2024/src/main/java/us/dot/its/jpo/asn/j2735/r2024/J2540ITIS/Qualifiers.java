/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.AbstractMap.SimpleEntry;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class Qualifiers extends Asn1Integer {

  private static final Map<String, Long> nameValueMap =
      Map.ofEntries(
          new SimpleEntry<>("above", 7681L),
          new SimpleEntry<>("below", 7682L),
          new SimpleEntry<>("in", 7683L),
          new SimpleEntry<>("around", 7684L),
          new SimpleEntry<>("after", 7685L),
          new SimpleEntry<>("before", 7686L),
          new SimpleEntry<>("at", 7687L),
          new SimpleEntry<>("on", 7688L),
          new SimpleEntry<>("near", 7689L),
          new SimpleEntry<>("from-the", 7690L),
          new SimpleEntry<>("terminal", 7691L),
          new SimpleEntry<>("falling-slowly", 7692L),
          new SimpleEntry<>("falling", 7693L),
          new SimpleEntry<>("falling-quickly", 7694L),
          new SimpleEntry<>("rising-slowly", 7695L),
          new SimpleEntry<>("rising", 7696L),
          new SimpleEntry<>("rising-quickly", 7697L),
          new SimpleEntry<>("steady", 7698L),
          new SimpleEntry<>("likely", 7699L),
          new SimpleEntry<>("changing-to", 7700L),
          new SimpleEntry<>("mostly", 7701L),
          new SimpleEntry<>("partly", 7702L),
          new SimpleEntry<>("minus", 7703L),
          new SimpleEntry<>("weather-ended", 7704L),
          new SimpleEntry<>("expected", 7705L),
          new SimpleEntry<>("low", 7706L),
          new SimpleEntry<>("mid", 7707L),
          new SimpleEntry<>("high", 7708L),
          new SimpleEntry<>("upper", 7709L),
          new SimpleEntry<>("middle", 7765L),
          new SimpleEntry<>("lower", 7764L),
          new SimpleEntry<>("unseasonably", 7710L),
          new SimpleEntry<>("reported", 7711L),
          new SimpleEntry<>("advice", 7712L),
          new SimpleEntry<>("due-to", 7713L),
          new SimpleEntry<>("proceed-to", 7714L),
          new SimpleEntry<>("transferred-to", 7715L),
          new SimpleEntry<>("use", 7716L),
          new SimpleEntry<>("affecting", 7717L),
          new SimpleEntry<>("blocking", 7718L),
          new SimpleEntry<>("connecting", 7719L),
          new SimpleEntry<>("finished", 7720L),
          new SimpleEntry<>("for", 7721L),
          new SimpleEntry<>("or", 7722L),
          new SimpleEntry<>("and", 7723L),
          new SimpleEntry<>("later", 7724L),
          new SimpleEntry<>("level", 7725L),
          new SimpleEntry<>("shortly", 7726L),
          new SimpleEntry<>("soon", 7727L),
          new SimpleEntry<>("service", 7728L),
          new SimpleEntry<>("graffiti", 7733L),
          new SimpleEntry<>("damaged", 7729L),
          new SimpleEntry<>("out-of-order", 7730L),
          new SimpleEntry<>("on-State-right-of-way", 7732L),
          new SimpleEntry<>("found-property", 7734L),
          new SimpleEntry<>("vandalism", 7731L),
          new SimpleEntry<>("major", 7766L),
          new SimpleEntry<>("minor", 7767L),
          new SimpleEntry<>("begin-time", 7735L),
          new SimpleEntry<>("added", 7736L),
          new SimpleEntry<>("end-time", 7737L),
          new SimpleEntry<>("no", 7738L),
          new SimpleEntry<>("do-not", 7739L),
          new SimpleEntry<>("block", 7740L),
          new SimpleEntry<>("except", 7741L),
          new SimpleEntry<>("day", 7742L),
          new SimpleEntry<>("night", 7743L),
          new SimpleEntry<>("any-time", 7744L),
          new SimpleEntry<>("has", 7745L),
          new SimpleEntry<>("must", 7757L),
          new SimpleEntry<>("may-have", 7746L),
          new SimpleEntry<>("may-exceed", 7759L),
          new SimpleEntry<>("only", 7747L),
          new SimpleEntry<>("lifted", 7748L),
          new SimpleEntry<>("empty", 7749L),
          new SimpleEntry<>("turning", 7750L),
          new SimpleEntry<>("u-turn", 7751L),
          new SimpleEntry<>("wait-for", 7752L),
          new SimpleEntry<>("when-flashing", 7753L),
          new SimpleEntry<>("duration", 7754L),
          new SimpleEntry<>("cross", 7755L),
          new SimpleEntry<>("when-wet", 7756L),
          new SimpleEntry<>("oncoming", 7758L),
          new SimpleEntry<>("to-request", 7760L),
          new SimpleEntry<>("exempt", 7761L),
          new SimpleEntry<>("skewed", 7762L),
          new SimpleEntry<>("when-children-are-present", 7763L));
  private static final Map<Long, String> valueNameMap =
      nameValueMap.entrySet().stream()
          .collect(Collectors.toUnmodifiableMap(Map.Entry::getValue, Map.Entry::getKey));

  public Qualifiers() {
    super(0L, 65535L);
  }

  @JsonCreator
  public Qualifiers(long value) {
    this();
    this.value = value;
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(valueNameMap.get(value));
  }

  public static Optional<Qualifiers> named(String name) {
    return Optional.ofNullable(nameValueMap.get(name)).map(Qualifiers::new);
  }

  public static Set<String> names() {
    return nameValueMap.keySet();
  }

  public static Set<Long> namedValues() {
    return valueNameMap.keySet();
  }
}
