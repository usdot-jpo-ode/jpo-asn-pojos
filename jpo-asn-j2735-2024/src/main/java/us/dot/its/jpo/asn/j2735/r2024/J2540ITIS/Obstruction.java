/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class Obstruction extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public Obstruction() {
    super(0L, 65535L);
  }

  @JsonCreator
  public Obstruction(long value) {
    this();
    this.setValue(value);
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("obstruction-on-roadway", 1281L);
      mapBuilder.put("object-on-roadway", 1282L);
      mapBuilder.put("objects-falling-from-moving-vehicle", 1283L);
      mapBuilder.put("debris-on-roadway", 1284L);
      mapBuilder.put("storm-damage", 1285L);
      mapBuilder.put("people-on-roadway", 1286L);
      mapBuilder.put("bicyclists-on-roadway", 1287L);
      mapBuilder.put("sightseers-obstructing-access", 1288L);
      mapBuilder.put("large-numbers-of-visitors", 1289L);
      mapBuilder.put("animal-on-roadway", 1290L);
      mapBuilder.put("large-animal-on-roadway", 1291L);
      mapBuilder.put("herd-of-animals-on-roadway", 1292L);
      mapBuilder.put("animal-struck", 1293L);
      mapBuilder.put("advertising-signs", 1315L);
      mapBuilder.put("fallen-trees", 1294L);
      mapBuilder.put("over-turned-trees", 1311L);
      mapBuilder.put("tree-limbs", 1312L);
      mapBuilder.put("utility-pole-down", 1314L);
      mapBuilder.put("downed-power-lines", 1295L);
      mapBuilder.put("downed-cables", 1296L);
      mapBuilder.put("subsidence", 1297L);
      mapBuilder.put("road-surface-collapse", 1298L);
      mapBuilder.put("frost-jacking", 1317L);
      mapBuilder.put("frost-heave", 1316L);
      mapBuilder.put("pavement-buckled", 1299L);
      mapBuilder.put("pothole", 1300L);
      mapBuilder.put("flooding", 1301L);
      mapBuilder.put("broken-water-main", 1302L);
      mapBuilder.put("collapsed-sewer", 1303L);
      mapBuilder.put("wash-out", 1319L);
      mapBuilder.put("washboard", 1318L);
      mapBuilder.put("sewer-overflow", 1304L);
      mapBuilder.put("gas-leak", 1305L);
      mapBuilder.put("snowmelt", 1306L);
      mapBuilder.put("mudslide", 1307L);
      mapBuilder.put("avalanche", 1308L);
      mapBuilder.put("rockfall", 1309L);
      mapBuilder.put("landslide", 1310L);
      mapBuilder.put("clearance-work", 1406L);
      mapBuilder.put("obstruction-cleared", 1407L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(getValue()));
  }

  public static Optional<Obstruction> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(Obstruction::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
