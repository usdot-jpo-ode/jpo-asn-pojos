/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class Objects extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public Objects() {
    super(0L, 65535L);
  }

  @JsonCreator
  public Objects(long value) {
    this();
    this.value = value;
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("unknown-object", 11009L);
      mapBuilder.put("tire", 11010L);
      mapBuilder.put("rim", 11011L);
      mapBuilder.put("retread", 11012L);
      mapBuilder.put("trash", 11013L);
      mapBuilder.put("cargo", 11014L);
      mapBuilder.put("diesel", 11015L);
      mapBuilder.put("gasoline", 11016L);
      mapBuilder.put("anti-freeze", 11017L);
      mapBuilder.put("propane-gas", 11061L);
      mapBuilder.put("alternative-fuel", 11060L);
      mapBuilder.put("seat-belts", 11018L);
      mapBuilder.put("litter-container", 11019L);
      mapBuilder.put("all-Terrain-vehicle", 11020L);
      mapBuilder.put("seaplane", 11021L);
      mapBuilder.put("chairlift", 11022L);
      mapBuilder.put("fishing-pier", 11023L);
      mapBuilder.put("telephone", 11025L);
      mapBuilder.put("railroad-cross-buck", 11024L);
      mapBuilder.put("horn", 11048L);
      mapBuilder.put("train", 11047L);
      mapBuilder.put("deer", 11049L);
      mapBuilder.put("horse", 11051L);
      mapBuilder.put("cattle", 11050L);
      mapBuilder.put("golf-cart", 11052L);
      mapBuilder.put("services", 11056L);
      mapBuilder.put("motorist-services", 11059L);
      mapBuilder.put("food-services", 11053L);
      mapBuilder.put("roadside-table", 11055L);
      mapBuilder.put("ambulance-staging-point", 11054L);
      mapBuilder.put("fallout", 11026L);
      mapBuilder.put("medical", 11027L);
      mapBuilder.put("chemical", 11028L);
      mapBuilder.put("welfare", 11029L);
      mapBuilder.put("decontamination", 11063L);
      mapBuilder.put("evacuation", 11030L);
      mapBuilder.put("registration", 11062L);
      mapBuilder.put("emergency", 11064L);
      mapBuilder.put("left-arrow-signal", 11031L);
      mapBuilder.put("ahead-arrow-signal", 11032L);
      mapBuilder.put("right-arrow-signal", 11033L);
      mapBuilder.put("green-light-signal", 11034L);
      mapBuilder.put("green-arrow-signal", 11035L);
      mapBuilder.put("yellow-light-signal", 11036L);
      mapBuilder.put("yellow-arrow-signal", 11037L);
      mapBuilder.put("red-light-signal", 11038L);
      mapBuilder.put("red-arrow-signal", 11039L);
      mapBuilder.put("extended-green-signal", 11040L);
      mapBuilder.put("advance-arrow-signal", 11041L);
      mapBuilder.put("pedestrian-Signal-Stop", 11042L);
      mapBuilder.put("pedestrian-Signal-Caution", 11043L);
      mapBuilder.put("pedestrian-Signal-Walk", 11044L);
      mapBuilder.put("pedestrian-Signal-Light", 11045L);
      mapBuilder.put("pedestrian-Signal-Time-Display", 11046L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(value));
  }

  public static Optional<Objects> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(Objects::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
