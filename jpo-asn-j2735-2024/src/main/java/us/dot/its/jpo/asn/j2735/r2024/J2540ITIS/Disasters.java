/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.AbstractMap.SimpleEntry;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class Disasters extends Asn1Integer {

  private static final Map<String, Long> nameValueMap =
      Map.ofEntries(
          new SimpleEntry<>("flash-flood", 3073L),
          new SimpleEntry<>("major-flood", 3074L),
          new SimpleEntry<>("reservoir-failure", 3075L),
          new SimpleEntry<>("levee-failure", 3076L),
          new SimpleEntry<>("tsunami", 3077L),
          new SimpleEntry<>("tidal-wave", 3078L),
          new SimpleEntry<>("volcanic-eruption", 3079L),
          new SimpleEntry<>("ash-fall", 3080L),
          new SimpleEntry<>("lava-flow", 3081L),
          new SimpleEntry<>("serious-fire", 3082L),
          new SimpleEntry<>("forest-fire", 3083L),
          new SimpleEntry<>("wildfire", 3084L),
          new SimpleEntry<>("building-fire", 3085L),
          new SimpleEntry<>("brush-fire", 3086L),
          new SimpleEntry<>("grass-fire", 3087L),
          new SimpleEntry<>("fire-danger-extreme", 3088L),
          new SimpleEntry<>("fire-danger-very-high", 3089L),
          new SimpleEntry<>("fire-danger-high", 3090L),
          new SimpleEntry<>("fire-danger-medium", 3091L),
          new SimpleEntry<>("fire-danger-low", 3092L),
          new SimpleEntry<>("earthquake-damage", 3093L),
          new SimpleEntry<>("air-crash", 3094L),
          new SimpleEntry<>("rail-crash", 3095L),
          new SimpleEntry<>("toxic-release", 3096L),
          new SimpleEntry<>("toxic-leak", 3097L),
          new SimpleEntry<>("radioactive-release", 3098L),
          new SimpleEntry<>("radiation-hazard", 3099L),
          new SimpleEntry<>("reactor-leakage", 3100L),
          new SimpleEntry<>("explosion", 3101L),
          new SimpleEntry<>("major-hazardous-materials-fire", 3102L),
          new SimpleEntry<>("major-hazardous-materials-release", 3103L),
          new SimpleEntry<>("disaster-cleared", 3199L));
  private static final Map<Long, String> valueNameMap =
      nameValueMap.entrySet().stream()
          .collect(Collectors.toUnmodifiableMap(Map.Entry::getValue, Map.Entry::getKey));

  public Disasters() {
    super(0L, 65535L);
  }

  @JsonCreator
  public Disasters(long value) {
    this();
    this.value = value;
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(valueNameMap.get(value));
  }

  public static Optional<Disasters> named(String name) {
    return Optional.ofNullable(nameValueMap.get(name)).map(Disasters::new);
  }

  public static Set<String> names() {
    return nameValueMap.keySet();
  }

  public static Set<Long> namedValues() {
    return valueNameMap.keySet();
  }
}
