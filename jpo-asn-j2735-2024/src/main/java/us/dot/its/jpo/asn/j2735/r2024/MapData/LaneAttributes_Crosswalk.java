/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.MapData;

import us.dot.its.jpo.asn.runtime.types.Asn1Bitstring;

public class LaneAttributes_Crosswalk extends Asn1Bitstring {

  public boolean isCrosswalkRevocableLane() {
    return get(0);
  }

  public void setCrosswalkRevocableLane(boolean crosswalkRevocableLane) {
    set(0, crosswalkRevocableLane);
  }

  public boolean isBicyleUseAllowed() {
    return get(1);
  }

  public void setBicyleUseAllowed(boolean bicyleUseAllowed) {
    set(1, bicyleUseAllowed);
  }

  public boolean isIsXwalkFlyOverLane() {
    return get(2);
  }

  public void setIsXwalkFlyOverLane(boolean isXwalkFlyOverLane) {
    set(2, isXwalkFlyOverLane);
  }

  public boolean isFixedCycleTime() {
    return get(3);
  }

  public void setFixedCycleTime(boolean fixedCycleTime) {
    set(3, fixedCycleTime);
  }

  public boolean isBiDirectionalCycleTimes() {
    return get(4);
  }

  public void setBiDirectionalCycleTimes(boolean biDirectionalCycleTimes) {
    set(4, biDirectionalCycleTimes);
  }

  public boolean isHasPushToWalkButton() {
    return get(5);
  }

  public void setHasPushToWalkButton(boolean hasPushToWalkButton) {
    set(5, hasPushToWalkButton);
  }

  public boolean isAudioSupport() {
    return get(6);
  }

  public void setAudioSupport(boolean audioSupport) {
    set(6, audioSupport);
  }

  public boolean isRfSignalRequestPresent() {
    return get(7);
  }

  public void setRfSignalRequestPresent(boolean rfSignalRequestPresent) {
    set(7, rfSignalRequestPresent);
  }

  public boolean isUnsignalizedSegmentsPresent() {
    return get(8);
  }

  public void setUnsignalizedSegmentsPresent(boolean unsignalizedSegmentsPresent) {
    set(8, unsignalizedSegmentsPresent);
  }

  public LaneAttributes_Crosswalk() {
    super(
        16,
        false,
        new String[] {
          "crosswalkRevocableLane",
          "bicyleUseAllowed",
          "isXwalkFlyOverLane",
          "fixedCycleTime",
          "biDirectionalCycleTimes",
          "hasPushToWalkButton",
          "audioSupport",
          "rfSignalRequestPresent",
          "unsignalizedSegmentsPresent"
        });
  }
}
