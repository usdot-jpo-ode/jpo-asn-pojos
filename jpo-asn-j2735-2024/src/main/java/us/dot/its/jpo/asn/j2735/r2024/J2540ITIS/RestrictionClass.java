/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class RestrictionClass extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public RestrictionClass() {
    super(0L, 65535L);
  }

  @JsonCreator
  public RestrictionClass(long value) {
    this();
    this.setValue(value);
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("restrictions", 2561L);
      mapBuilder.put("ramp-restrictions", 2562L);
      mapBuilder.put("truck-restriction", 2563L);
      mapBuilder.put("speed-restriction", 2564L);
      mapBuilder.put("noise-restriction", 2565L);
      mapBuilder.put("traffic-regulations-have-been-changed", 2566L);
      mapBuilder.put("local-access-only", 2567L);
      mapBuilder.put("no-trailers", 2568L);
      mapBuilder.put("no-high-profile-vehicles", 2569L);
      mapBuilder.put("hazardous-materials-truck-restriction", 2570L);
      mapBuilder.put("no-through-traffic", 2571L);
      mapBuilder.put("no-motor-vehicles", 2572L);
      mapBuilder.put("width-limit", 2573L);
      mapBuilder.put("height-limit", 2574L);
      mapBuilder.put("length-limit", 2575L);
      mapBuilder.put("axle-load-limit", 2576L);
      mapBuilder.put("gross-weight-limit", 2577L);
      mapBuilder.put("axle-count-limit", 2578L);
      mapBuilder.put("carpool-lane-available", 2579L);
      mapBuilder.put("carpool-restrictions-changed", 2580L);
      mapBuilder.put("hOV-2-no-single-occupant-vehicles", 2581L);
      mapBuilder.put("hOV-3-no-vehicles-with-less-than-three-occupants", 2582L);
      mapBuilder.put("bus-lane-available-for-all-vehicles", 2583L);
      mapBuilder.put("truck-lane-available-for-all-vehicles", 2584L);
      mapBuilder.put("permits-call-in-basis", 2585L);
      mapBuilder.put("permits-temporarily-closed", 2586L);
      mapBuilder.put("permits-closed", 2587L);
      mapBuilder.put("road-use-permits-required", 2588L);
      mapBuilder.put("permits-open", 2675L);
      mapBuilder.put("restrictions-for-high-profile-vehicles-lifted", 2676L);
      mapBuilder.put("width-limit-lifted", 2677L);
      mapBuilder.put("height-limit-lifted", 2678L);
      mapBuilder.put("length-limit-lifted", 2679L);
      mapBuilder.put("axle-load-limit-lifted", 2680L);
      mapBuilder.put("weight-limit-lifted", 2681L);
      mapBuilder.put("axle-count-limit-lifted", 2682L);
      mapBuilder.put("carpool-restrictions-lifted", 2683L);
      mapBuilder.put("lane-restrictions-lifted", 2684L);
      mapBuilder.put("ramp-restrictions-lifted", 2685L);
      mapBuilder.put("motor-vehicle-restrictions-lifted", 2686L);
      mapBuilder.put("restrictions-lifted", 2687L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(getValue()));
  }

  public static Optional<RestrictionClass> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(RestrictionClass::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
