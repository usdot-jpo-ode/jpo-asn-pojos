/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.AbstractMap.SimpleEntry;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class SuggestionAdvice extends Asn1Integer {

  private static final Map<String, Long> nameValueMap =
      Map.ofEntries(
          new SimpleEntry<>("why-not-ride-share", 6657L),
          new SimpleEntry<>("is-this-your-no-ride-day", 6658L),
          new SimpleEntry<>("why-not-use-transit", 6659L),
          new SimpleEntry<>("why-not-park-and-ride", 6660L),
          new SimpleEntry<>("why-not-try-paratransit", 6661L),
          new SimpleEntry<>("why-not-travel-by-rail", 6662L),
          new SimpleEntry<>("why-not-use-the-subway", 6663L),
          new SimpleEntry<>("why-not-try-rapid-transit", 6664L),
          new SimpleEntry<>("why-not-travel-by-bus", 6665L),
          new SimpleEntry<>("your-parking-ticket-covers-the-return-ride", 6666L),
          new SimpleEntry<>("avoid-the-rush-hour", 6667L),
          new SimpleEntry<>("do-not-allow-unnecessary-gaps", 6668L),
          new SimpleEntry<>("follow-the-vehicle-in-front-smoothly", 6669L),
          new SimpleEntry<>("do-not-slow-down-unnecessarily", 6670L),
          new SimpleEntry<>("watch-for-muggers", 6671L),
          new SimpleEntry<>("watch-for-pickpockets", 6672L),
          new SimpleEntry<>("watch-for-thieves", 6673L),
          new SimpleEntry<>("sorry-for-any-delay", 6674L),
          new SimpleEntry<>("thank-you-for-your-understanding", 6675L),
          new SimpleEntry<>("we-appreciate-your-patience", 6676L),
          new SimpleEntry<>("we-are-grateful-for-your-cooperation", 6677L),
          new SimpleEntry<>("share-the-road", 6678L));
  private static final Map<Long, String> valueNameMap =
      nameValueMap.entrySet().stream()
          .collect(Collectors.toUnmodifiableMap(Map.Entry::getValue, Map.Entry::getKey));

  public SuggestionAdvice() {
    super(0L, 65535L);
  }

  @JsonCreator
  public SuggestionAdvice(long value) {
    this();
    this.value = value;
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(valueNameMap.get(value));
  }

  public static Optional<SuggestionAdvice> named(String name) {
    return Optional.ofNullable(nameValueMap.get(name)).map(SuggestionAdvice::new);
  }

  public static Set<String> names() {
    return nameValueMap.keySet();
  }

  public static Set<Long> namedValues() {
    return valueNameMap.keySet();
  }
}
