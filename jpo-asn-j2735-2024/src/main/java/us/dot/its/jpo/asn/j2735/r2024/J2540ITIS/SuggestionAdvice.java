/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class SuggestionAdvice extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public SuggestionAdvice() {
    super(0L, 65535L);
  }

  @JsonCreator
  public SuggestionAdvice(long value) {
    this();
    this.setValue(value);
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("why-not-ride-share", 6657L);
      mapBuilder.put("is-this-your-no-ride-day", 6658L);
      mapBuilder.put("why-not-use-transit", 6659L);
      mapBuilder.put("why-not-park-and-ride", 6660L);
      mapBuilder.put("why-not-try-paratransit", 6661L);
      mapBuilder.put("why-not-travel-by-rail", 6662L);
      mapBuilder.put("why-not-use-the-subway", 6663L);
      mapBuilder.put("why-not-try-rapid-transit", 6664L);
      mapBuilder.put("why-not-travel-by-bus", 6665L);
      mapBuilder.put("your-parking-ticket-covers-the-return-ride", 6666L);
      mapBuilder.put("avoid-the-rush-hour", 6667L);
      mapBuilder.put("do-not-allow-unnecessary-gaps", 6668L);
      mapBuilder.put("follow-the-vehicle-in-front-smoothly", 6669L);
      mapBuilder.put("do-not-slow-down-unnecessarily", 6670L);
      mapBuilder.put("watch-for-muggers", 6671L);
      mapBuilder.put("watch-for-pickpockets", 6672L);
      mapBuilder.put("watch-for-thieves", 6673L);
      mapBuilder.put("sorry-for-any-delay", 6674L);
      mapBuilder.put("thank-you-for-your-understanding", 6675L);
      mapBuilder.put("we-appreciate-your-patience", 6676L);
      mapBuilder.put("we-are-grateful-for-your-cooperation", 6677L);
      mapBuilder.put("share-the-road", 6678L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(getValue()));
  }

  public static Optional<SuggestionAdvice> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(SuggestionAdvice::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
