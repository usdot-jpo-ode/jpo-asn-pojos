/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.J2540ITIS;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class NamedObjects extends Asn1Integer {

  private static final NamedValues namedValues = new NamedValues();

  public NamedObjects() {
    super(0L, 65535L);
  }

  @JsonCreator
  public NamedObjects(long value) {
    this();
    this.value = value;
  }

  private static class NamedValues {
    private final Map<String, Long> nameMap;
    private final Map<Long, String> valueMap;

    public NamedValues() {
      var mapBuilder = new LinkedHashMap<String, Long>();
      mapBuilder.put("name-follows", 11777L);
      mapBuilder.put("freeway", 11778L);
      mapBuilder.put("us-Route", 11779L);
      mapBuilder.put("state-Route", 11780L);
      mapBuilder.put("interstate", 11781L);
      mapBuilder.put("business-Loop", 11782L);
      mapBuilder.put("spur", 11797L);
      mapBuilder.put("junction", 11798L);
      mapBuilder.put("alternative", 11783L);
      mapBuilder.put("county-Route", 11784L);
      mapBuilder.put("forest-Route", 11785L);
      mapBuilder.put("farm-to-Market-Route", 11786L);
      mapBuilder.put("eisenhower-Interstate-System", 11787L);
      mapBuilder.put("americas-Byways", 11788L);
      mapBuilder.put("national-Network-Route", 11789L);
      mapBuilder.put("scenic-Area", 11790L);
      mapBuilder.put("parking-Area", 11791L);
      mapBuilder.put("weight-Station", 11792L);
      mapBuilder.put("road", 11793L);
      mapBuilder.put("exit", 11794L);
      mapBuilder.put("historical-route", 11795L);
      mapBuilder.put("state-line", 11796L);
      mapBuilder.put("bicycle-route", 11799L);
      mapBuilder.put("bicycle-interstate-route", 11800L);
      mapBuilder.put("national-park", 11801L);
      nameMap = Collections.unmodifiableMap(mapBuilder);
      final var valueMapBuilder = new LinkedHashMap<Long, String>();
      mapBuilder.forEach((k, v) -> valueMapBuilder.put(v, k));
      valueMap = Collections.unmodifiableMap(valueMapBuilder);
    }
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(namedValues.valueMap.get(value));
  }

  public static Optional<NamedObjects> named(String name) {
    return Optional.ofNullable(namedValues.nameMap.get(name)).map(NamedObjects::new);
  }

  public static Set<String> names() {
    return namedValues.nameMap.keySet();
  }

  public static Set<Long> namedValues() {
    return namedValues.valueMap.keySet();
  }
}
