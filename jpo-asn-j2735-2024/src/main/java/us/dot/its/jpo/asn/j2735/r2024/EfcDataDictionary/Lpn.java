/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.EfcDataDictionary;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import us.dot.its.jpo.asn.runtime.annotations.Asn1Property;
import us.dot.its.jpo.asn.runtime.serialization.EnumeratedDeserializer;
import us.dot.its.jpo.asn.runtime.serialization.EnumeratedSerializer;
import us.dot.its.jpo.asn.runtime.types.Asn1Enumerated;
import us.dot.its.jpo.asn.runtime.types.Asn1OctetString;
import us.dot.its.jpo.asn.runtime.types.Asn1Sequence;

@JsonInclude(Include.NON_NULL)
@JsonIgnoreProperties(ignoreUnknown = true)
@ToString(callSuper = true)
@Getter
@Setter
public class Lpn extends Asn1Sequence {

  @Asn1Property(tag = 0, name = "countryCode")
  @JsonProperty("countryCode")
  private CountryCode countryCode;

  @Asn1Property(tag = 1, name = "alphabetIndicator")
  @JsonProperty("alphabetIndicator")
  private EnumeratedAlphabetIndicator alphabetIndicator;

  @Asn1Property(tag = 2, name = "licencePlateNumber")
  @JsonProperty("licencePlateNumber")
  private LicencePlateNumberOctetString licencePlateNumber;

  @Getter
  @JsonSerialize(using = EnumeratedAlphabetIndicatorSerializer.class)
  @JsonDeserialize(using = EnumeratedAlphabetIndicatorDeserializer.class)
  public enum EnumeratedAlphabetIndicator implements Asn1Enumerated {
    LATINALPHABETNO1(1, "latinAlphabetNo1"),
    LATINALPHABETNO2(2, "latinAlphabetNo2"),
    LATINALPHABETNO3(3, "latinAlphabetNo3"),
    LATINALPHABETNO4(4, "latinAlphabetNo4"),
    LATINCYRILLICALPHABET(5, "latinCyrillicAlphabet"),
    LATINARABICALPHABET(6, "latinArabicAlphabet"),
    LATINGREEKALPHABET(7, "latinGreekAlphabet"),
    LATINHEBREWALPHABET(8, "latinHebrewAlphabet"),
    LATINALPHABETNO5(9, "latinAlphabetNo5"),
    LATINALPHABETNO6(10, "latinAlphabetNo6"),
    TWOOCTETBMP(11, "twoOctetBMP"),
    FOUROCTETCANONICAL(12, "fourOctetCanonical"),
    RESERVEDFORUSE1(13, "reservedForUse1"),
    RESERVEDFORUSE2(14, "reservedForUse2"),
    RESERVEDFORUSE3(15, "reservedForUse3"),
    RESERVEDFORUSE4(16, "reservedForUse4"),
    RESERVEDFORUSE5(17, "reservedForUse5"),
    RESERVEDFORUSE6(18, "reservedForUse6"),
    RESERVEDFORUSE7(19, "reservedForUse7"),
    RESERVEDFORUSE8(20, "reservedForUse8"),
    RESERVEDFORUSE9(21, "reservedForUse9"),
    RESERVEDFORUSE10(22, "reservedForUse10"),
    RESERVEDFORUSE11(23, "reservedForUse11"),
    RESERVEDFORUSE12(24, "reservedForUse12"),
    RESERVEDFORUSE13(25, "reservedForUse13"),
    RESERVEDFORUSE14(26, "reservedForUse14"),
    RESERVEDFORUSE15(27, "reservedForUse15"),
    RESERVEDFORUSE16(28, "reservedForUse16"),
    RESERVEDFORUSE17(29, "reservedForUse17"),
    RESERVEDFORUSE18(30, "reservedForUse18"),
    RESERVEDFORUSE19(31, "reservedForUse19"),
    RESERVEDFORUSE20(32, "reservedForUse20"),
    RESERVEDFORUSE21(33, "reservedForUse21");

    private final int index;
    private final String name;

    private EnumeratedAlphabetIndicator(int index, String name) {
      this.index = index;
      this.name = name;
    }
  }

  public static class EnumeratedAlphabetIndicatorSerializer
      extends EnumeratedSerializer<EnumeratedAlphabetIndicator> {
    public EnumeratedAlphabetIndicatorSerializer() {
      super(EnumeratedAlphabetIndicator.class);
    }
  }

  public static class EnumeratedAlphabetIndicatorDeserializer
      extends EnumeratedDeserializer<EnumeratedAlphabetIndicator> {
    public EnumeratedAlphabetIndicatorDeserializer() {
      super(EnumeratedAlphabetIndicator.class);
    }

    @Override
    protected EnumeratedAlphabetIndicator[] listEnumValues() {
      return EnumeratedAlphabetIndicator.values();
    }
  }

  public static class LicencePlateNumberOctetString extends Asn1OctetString {
    public LicencePlateNumberOctetString() {
      super(0, 2147483647);
    }

    @JsonCreator
    public LicencePlateNumberOctetString(String value) {
      this();
      setValue(value);
    }
  }

  public Lpn() {}
}
