/*==============================================================================
 *
 * This source file was generated by a tool.
 * Beware manual edits might be overwritten in future releases.
 * asn1jvm v1.0-SNAPSHOT
 *
 *------------------------------------------------------------------------------
 * Copyright 2024 USDOT
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *============================================================================*/

package us.dot.its.jpo.asn.j2735.r2024.CooperativeControlMessage;

import com.fasterxml.jackson.annotation.JsonCreator;
import java.util.AbstractMap.SimpleEntry;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import us.dot.its.jpo.asn.runtime.types.Asn1Integer;

public class ManeuverID extends Asn1Integer {

  private static final Map<String, Long> nameValueMap =
      Map.ofEntries(
          new SimpleEntry<>("unavailable", 0L),
          new SimpleEntry<>("stayAtRestManCtl", 1L),
          new SimpleEntry<>("stayAtRestAutoLonCtl", 2L),
          new SimpleEntry<>("autoSpdCtlFollowRefTrafAccel", 4L),
          new SimpleEntry<>("transManToAutoSpdCtl", 5L),
          new SimpleEntry<>("stringForm", 6L),
          new SimpleEntry<>("autoJoinString", 7L),
          new SimpleEntry<>("autoCtl", 8L),
          new SimpleEntry<>("increaseGapAutoCtl", 9L),
          new SimpleEntry<>("leftLnChgEndString", 10L),
          new SimpleEntry<>("rightLnChgEndString", 11L),
          new SimpleEntry<>("virtualGapIncDiffLane", 12L),
          new SimpleEntry<>("virtualGapRedDiffLane", 13L),
          new SimpleEntry<>("emgcyIncInterVehDistToStop", 14L),
          new SimpleEntry<>("vehMrgToStringFrmOnramp", 15L),
          new SimpleEntry<>("leftLnChgJoinString", 16L),
          new SimpleEntry<>("rightLnChgJoinString", 17L),
          new SimpleEntry<>("collisionAvoidLnChgOnly", 19L),
          new SimpleEntry<>("collisionAvoidLnChgWthSpdRed", 20L),
          new SimpleEntry<>("collisionAvoidEmgcyStp", 21L),
          new SimpleEntry<>("autoDecelFollowSpdProfile", 28L),
          new SimpleEntry<>("stoppingClosedloopVehFollowCtl", 31L),
          new SimpleEntry<>("stoppngOpenloopDecelCmd", 32L),
          new SimpleEntry<>("brakeToStopManCtl", 33L),
          new SimpleEntry<>("incGapContString", 34L),
          new SimpleEntry<>("incGapRedSpdToStp", 35L),
          new SimpleEntry<>("cruiseCtl", 36L),
          new SimpleEntry<>("adapCruiseCtl", 41L),
          new SimpleEntry<>("coopAdapCruiseCtl", 42L),
          new SimpleEntry<>("manCtl", 46L),
          new SimpleEntry<>("coordAutoBrkForStringWthSvcBrkEngBrk", 47L),
          new SimpleEntry<>("emgcyBrkForStringOnePlusVehWthSvcBrk", 48L));
  private static final Map<Long, String> valueNameMap =
      nameValueMap.entrySet().stream()
          .collect(Collectors.toUnmodifiableMap(Map.Entry::getValue, Map.Entry::getKey));

  public ManeuverID() {
    super(0L, 255L);
  }

  @JsonCreator
  public ManeuverID(long value) {
    this();
    this.value = value;
  }

  @Override
  public Optional<String> name() {
    return Optional.ofNullable(valueNameMap.get(value));
  }

  public static Optional<ManeuverID> named(String name) {
    return Optional.ofNullable(nameValueMap.get(name)).map(ManeuverID::new);
  }

  public static Set<String> names() {
    return nameValueMap.keySet();
  }

  public static Set<Long> namedValues() {
    return valueNameMap.keySet();
  }
}
